Logika Tworzenia i Zarządzania Tunelami IPv6 (SIT/GRE)

1. Główne komponenty
   1. Prefixy IPv6:
      - Para 1:
        - 2a05:dfc1:3c00::/44 (primary)
        - 2a12:bec0:2c00::/44 (secondary)
      - Para 2:
        - 2a05:1083:0000::/44 (primary)
        - 2a05:dfc3:ff00::/44 (secondary)
      - ULA: fde4:5a50:1114::/48 (dla endpointów tuneli)

   2. Zasady przydzielania:
      - Każdy użytkownik może mieć maksymalnie 2 tunele
      - Pierwszy tunel otrzymuje prefixy z pierwszej pary
      - Drugi tunel otrzymuje prefixy z drugiej pary
      - Każdy tunel otrzymuje dwa /64 (po jednym z każdego prefixu w parze)
      - Format adresów:
        - Trzeci tercet: ostatni bit jest losowy (0 lub 1)
        - Czwarty tercet: ID użytkownika (4 znaki hex)
      - Endpointy tunelu używają adresów ULA

2. Proces tworzenia tunelu
   1. Sprawdzenie liczby istniejących tuneli użytkownika
      - Limit: 2 tunele na użytkownika
      - Status tuneli musi być 'active'

   2. Generowanie ID tunelu
      - Format: tun-{user_id}-{pair_number}
      - user_id: 4 znaki hex
      - pair_number: 1 lub 2

   3. Przydzielanie prefixów
      - Wybór pary na podstawie numeru tunelu (1 lub 2)
      - Generowanie losowego bitu (0/1) dla ostatniego bitu trzeciego tercetu
      - Format: {prefix}:{random_bit}:{user_id}::/64
      - Przykład:
        - Dla user_id=abcd, random_bit=1:
        - Z 2a05:dfc1:3c00::/44 -> 2a05:dfc1:3c01:abcd::/64
        - Z 2a12:bec0:2c00::/44 -> 2a12:bec0:2c01:abcd::/64

   4. Generowanie adresów ULA
      - Bazowy prefix: fde4:5a50:1114::/48
      - Format endpointów: fde4:5a50:1114:{sequence}::{1,2}/64
      - sequence: kolejny numer w hex (0000-ffff)
      - :1 dla serwera, :2 dla klienta

3. Konfiguracja tunelu SIT
   Komendy dla serwera:
   ```
   ip tunnel add {tunnel_id} mode sit local {server_ipv4} remote {client_ipv4} ttl 255
   ip link set {tunnel_id} up
   ip -6 addr add {endpoint_local} dev {tunnel_id}
   ip -6 route add {delegated_prefix_1} dev {tunnel_id}
   ip -6 route add {delegated_prefix_2} dev {tunnel_id}
   ```

   Komendy dla klienta:
   ```
   ip tunnel add {tunnel_id} mode sit local {client_ipv4} remote {server_ipv4} ttl 255
   ip link set {tunnel_id} up
   ip -6 addr add {endpoint_remote} dev {tunnel_id}
   ip -6 addr add {delegated_prefix_1}::1/64 dev {tunnel_id}
   ip -6 addr add {delegated_prefix_2}::1/64 dev {tunnel_id}
   ip -6 route add ::/0 via {endpoint_local_ip} dev {tunnel_id}
   ```

4. Konfiguracja tunelu GRE
   Komendy dla serwera:
   ```
   ip tunnel add {tunnel_id} mode gre local {server_ipv4} remote {client_ipv4} ttl 255
   ip link set {tunnel_id} up
   ip -6 addr add {endpoint_local} dev {tunnel_id}
   ip -6 route add {delegated_prefix_1} dev {tunnel_id}
   ip -6 route add {delegated_prefix_2} dev {tunnel_id}
   ```

   Komendy dla klienta:
   ```
   ip tunnel add {tunnel_id} mode gre local {client_ipv4} remote {server_ipv4} ttl 255
   ip link set {tunnel_id} up
   ip -6 addr add {endpoint_remote} dev {tunnel_id}
   ip -6 addr add {delegated_prefix_1}::1/64 dev {tunnel_id}
   ip -6 addr add {delegated_prefix_2}::1/64 dev {tunnel_id}
   ip -6 route add ::/0 via {endpoint_local_ip} dev {tunnel_id}
   ```

5. Struktura bazy danych
   1. Tabela prefixes:
      ```sql
      CREATE TABLE public.prefixes (
          id uuid PRIMARY KEY DEFAULT extensions.uuid_generate_v4(),
          prefix text NOT NULL UNIQUE,
          is_endpoint boolean DEFAULT false,
          pair_number integer CHECK (pair_number IN (1, 2)),
          description text,
          created_at timestamptz NOT NULL DEFAULT now()
      );
      ```

   2. Tabela tunnels:
      ```sql
      CREATE TABLE public.tunnels (
          id text PRIMARY KEY,
          user_id text NOT NULL,
          type text NOT NULL,
          status text NOT NULL,
          server_ipv4 text NOT NULL,
          client_ipv4 text NOT NULL,
          endpoint_local text NOT NULL,
          endpoint_remote text NOT NULL,
          delegated_prefix_1 text NOT NULL,
          delegated_prefix_2 text NOT NULL
      );
      ```

   3. Tabela users:
      ```sql
      CREATE TABLE public.users (
          id text PRIMARY KEY,
          created_tunnels integer DEFAULT 0,
          active_tunnels integer DEFAULT 0
      );
      ```

6. API
   1. Tworzenie tunelu:
      ```
      POST /api/v1/tunnels
      {
          "type": "sit|gre",
          "user_id": "hex4",
          "client_ipv4": "x.x.x.x"
      }
      ```

   2. Aktualizacja IP klienta:
      ```
      PATCH /api/v1/tunnels/{tunnel_id}/ip
      {
          "client_ipv4": "x.x.x.x"
      }
      ```
      Odpowiedź zawiera nowe komendy do wykonania:
      ```
      {
          "commands": {
              "server": [
                  "ip tunnel change {tunnel_id} mode {type} remote {new_client_ipv4} ttl 255"
              ],
              "client": [
                  "ip tunnel change {tunnel_id} mode {type} remote {server_ipv4} local {new_client_ipv4} ttl 255"
              ]
          }
      }
      ```

   3. Usuwanie tunelu:
      ```
      DELETE /api/v1/tunnels/{tunnel_id}
      ```

7. Uwagi
   - Wszystkie komendy dla tuneli używają TTL=255
   - Oba delegowane prefixy są konfigurowane na interfejsie tunelu
   - Prefixy ULA służą tylko do endpointów tuneli
   - Każdy tunel ma unikalny identyfikator w formacie tun-{user_id}-{pair_number}
   - System automatycznie zarządza numeracją ULA dla endpointów
   - Limit tuneli:
     - Użytkownik może utworzyć maksymalnie 2 tunele
     - Licznik created_tunnels w tabeli users nie jest zmniejszany przy usunięciu tunelu
     - Jeśli created_tunnels = 2, użytkownik nie może tworzyć nowych tuneli nawet po usunięciu starych
     - Tylko admin może zresetować licznik created_tunnels
   - Aktualizacja IP:
     - Klient może zaktualizować swój adres IPv4 dla istniejącego tunelu
     - Aktualizacja wykorzystuje komendę 'ip tunnel change' zamiast usuwania i tworzenia tunelu od nowa
     - System automatycznie aktualizuje konfigurację po obu stronach tunelu 


	 Dla bazy uywamy supabase i dane dostępowe mamy w pliku .env