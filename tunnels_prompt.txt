Ultimate Guide: Logika Tworzenia i Zarządzania Tunelami 6in4 (SIT)

(z wykorzystaniem 4 głównych prefixów oraz ULA)

Poniższa instrukcja stanowi kompleksowe podsumowanie ustaleń z całego wątku dotyczącego konfigurowania serwisu typu TunnelBroker. Wyjaśnia, jak przydzielamy dwa /64 z głównych prefixów, jak korzystamy z prefixu ULA dla endpointów tunelu oraz jak wygląda przykładowa konfiguracja na hoście serwera i kliencie.

	Cel: Ułatwić programiście (od części backend) zaimplementowanie logiki w aplikacji TunnelBroker tak, by w sposób automatyczny generować i konfigurować tunele oraz przydzielać klientom odpowiednie prefiksy.

1. Główne komponenty i założenia
	1.	Główne prefixy IPv6 – mamy 4 puli (przykładowe wartości, dokładnie jak w naszej konfiguracji):
	1.	2a05:dfc1:3c00::/40
	2.	2a12:bec0:2c0::/44
	3.	2a05:1083::/32
	4.	2a05:dfc3:ff00::/40
	2.	Pairing (parowanie prefixów) – tworzymy tunele w parach, tzn.:
	•	Pierwsza para:
	•	2a05:dfc1:3c00::/40 i 2a12:bec0:2c0::/44
	•	Druga para:
	•	2a05:1083::/32 i 2a05:dfc3:ff00::/40
Dzięki temu, na jeden tunel przydzielamy dwa osobne /64:
	•	z pierwszej pary albo
	•	z drugiej pary.
	3.	Random/Losowy segment – w wytycznych uzgodniono, że w czwartym hextetcie (np. 0000:0000:0000:****) będzie „losowy” lub unikalny fragment, np. beef, dead, 1111:abcd itp.
        To samo się tyczy tworzenia adresów ULA jako końcówek styku tuneli np fde4:5a50:1114:beef::1/64 i fde4:5a50:1114:beef::2/64
        Pozwala to odróżnić podsieci przydzielane kolejnym tunelom, w ramach tych samych prefixów.
	4.	Każdemu tunelowi przydzielamy:
	•	Dwa /64 (np. 2a05:dfc1:3c00:beef::/64 + 2a12:bec0:2c0:beef::/64 w przypadku pierwszej pary).
	•	Endpointy tunelu wykorzystują adresy ULA – w tym celu mamy główny prefix ULA: fde4:5a50:1114::/48. Z niego wydzielamy odpowiednie /64 na potrzeby interfejsu tunelu.
	5.	Unikanie duplikatów – w logice (część backend):
	•	Należy przechowywać spis już wykorzystanych segmentów (lub całych /64) i przed przydzieleniem nowego zestawu sprawdzić, czy dany segment nie jest w użyciu.
	•	Można np. w bazie danych trzymać kolumnę random_hex_segment i przed utworzeniem tunelu generować nowy, sprawdzając kolizję.
	6.	Transport – tunel 6in4 (SIT) wykorzystuje adresy IPv4 (publiczne) po obu stronach. W naszym przykładzie:
	•	Serwer TunnelBroker: 192.67.35.38 (lub cokolwiek innego)
	•	Klient: 141.11.62.211
	7.	Zarządzanie – Serwer ma wewnętrznie interfejs dummy1 (lub podobny) z „zakotwiczonymi” głównymi prefixami. ULA (fde4:5a50:1114::/48) także możemy dopisać do tego samego interfejsu dummy1 (lub do lo – w zależności od preferencji).

2. Schemat i logika przydzielania prefixów w tunelu
	1.	Wybór pary
	•	Zazwyczaj wymagana jest rotacja pomiędzy parami. Przykładowo:
	•	Pierwszy tunel → prefixy z pierwszej pary (2a05:dfc1:3c00::/40 i 2a12:bec0:2c0::/44)
	•	Drugi tunel → prefixy z drugiej pary (2a05:1083::/32 i 2a05:dfc3:ff00::/40)
	•	Trzeci tunel → znów pierwsza para, czwarty → druga para, itd.
	•	Ewentualnie możesz wybrać parę w zależności od pewnego klucza (np. geolokalizacja, user ID itp.) lub cyklicznie.
	2.	Generowanie „losowego” segmentu
	•	Tworzymy np. 16-bitowy (lub 32-bitowy) losowy numer w hex (w stylu beef, dead, cafe1234), który będzie stanowił czwarty hextet.
	•	Przykład: z generatora w backendzie wylatuje 0xbeef.
	3.	Z tych prefixów wydzielamy /64:
	•	Przykład (dla pierwszej pary i segmentu beef):
	•	z 2a05:dfc1:3c00::/40 → 2a05:dfc1:3c00:beef::/64
	•	z 2a12:bec0:2c0::/44 → 2a12:bec0:2c0:beef::/64
	•	Przykład (dla drugiej pary i segmentu dead):
	•	z 2a05:1083::/32 → 2a05:1083:dead::/64
	•	z 2a05:dfc3:ff00::/40 → 2a05:dfc3:ff00:dead::/64
	4.	Sprawdzenie duplikatów
	•	Backend powinien zbadać, czy segment beef nie jest już wykorzystany w obrębie danego głównego prefixu. Jeśli jest wolny → zatwierdzić. Jeśli zajęty → wygenerować nowy i ponowić próbę.
	5.	Wynik: 2x /64 w IPv6 do przekazania użytkownikowi.

3. Adresowanie endpointów tunelu (ULA)
	•	Każdy tunel SIT potrzebuje jednego /64 z puli ULA (wystarczy wziąć kolejny wolny blok z fde4:5a50:1114::/48 – np. fde4:5a50:1114:beef::/64, fde4:5a50:1114:fafa::/64, etc.).
	•	Serwer (TunnelBroker) dostaje np. fde4:5a50:1114:beef::1/64, klient – fde4:5a50:1114:beef::2/64.
	•	Te adresy ULA nie muszą być widoczne w Internecie – działają tylko w obrębie tunelu, który i tak jest zestawiony przez IPv4.

4. Przykład konfiguracji (Debian 12, iproute2)

Poniżej – minimalny zestaw komend. Zakładamy:
	•	Serwer:
	•	IPv4: 192.67.35.38
	•	Endpoint ULA: fde4:5a50:1114:beef::1/64
	•	Rutuje do klienta dwie wybrane /64 (np. 2a05:dfc1:3c00:beef::/64 i 2a12:bec0:2c0:beef::/64)
	•	Klient:
	•	IPv4: 141.11.62.211
	•	Endpoint ULA: fde4:5a50:1114:beef::2/64

4.1. Po stronie serwera

# 1. Utworzenie tunelu 6in4 (SIT)
ip tunnel add tun0 mode sit \
    local 192.67.35.38 \
    remote 141.11.62.211 \
    ttl 64

# 2. Podniesienie interfejsu
ip link set tun0 up

# 3. Adres ULA na tunelu (strona serwera)
ip addr add fde4:5a50:1114:beef::1/64 dev tun0

# 4. Routing do prefixów klienta
ip -6 route add 2a05:dfc1:3c00:beef::/64 via fde4:5a50:1114:beef::2 dev tun0
ip -6 route add 2a12:bec0:2c0:beef::/64 via fde4:5a50:1114:beef::2 dev tun0

4.2. Po stronie klienta

# 1. Utworzenie tunelu 6in4 (SIT)
ip tunnel add tun0 mode sit \
    local 141.11.62.211 \
    remote 192.67.35.38 \
    ttl 64

# 2. Podniesienie interfejsu
ip link set tun0 up

# 3. Adres ULA na tunelu (strona klienta)
ip addr add fde4:5a50:1114:beef::2/64 dev tun0

# 4. (Opcjonalnie) domyślna trasa IPv6 
#    jeśli cały ruch ma przechodzić przez tunel
ip -6 route add default via fde4:5a50:1114:beef::1 dev tun0

# 5. Przydzielanie /64 do dalszych interfejsów
# Klient otrzymał 2a05:dfc1:3c00:beef::/64 i 2a12:bec0:2c0:beef::/64
# Może np. nadać te prefixy na lokalnej sieci LAN, br0, etc.
#
# Przykładowo:
# ip addr add 2a05:dfc1:3c00:beef::1/64 dev eth0
# ip addr add 2a12:bec0:2c0:beef::1/64 dev eth0
#
# lub skonfigurować radvd/dhcpv6 itp.

5. Integracja z aplikacją (backend)
	1.	Tworzenie nowego tunelu
	•	Po stronie backendu:
	1.	Odczytać aktualną listę zajętych segmentów.
	2.	Wybrać parę prefixów (pierwsza lub druga) na podstawie reguł (np. cyklicznie).
	3.	Wygenerować losowy segment (np. beef) i sprawdzić, czy nie jest już użyty.
	4.	Wyliczyć finalne /64 (np. 2a05:dfc1:3c00:beef::/64 i 2a12:bec0:2c0:beef::/64).
	5.	Zarezerwować /64 (zapis w bazie: identyfikator tunelu, segment, daty itp.).
	6.	Z puli ULA (fde4:5a50:1114::/48) pobrać kolejne wolne /64 (np. fde4:5a50:1114:100::/64) i zapisać w bazie.
	7.	Wystawić w API (albo wygenerować w skrypcie) komendy iproute2, które serwer (lub klient) wykona.
	2.	Wykonanie komend
	•	Frontend może wywołać API, przekazać parametry (IPv4 klienta, wylosowane prefixy itp.).
	•	Backend uruchamia odpowiedni skrypt (Ansible/Salt/Chef, SSH) – lub bezpośrednio – by na serwerze TunnelBroker zestawić tunel i ustawić routing tak jak w sekcji 4.1.
	•	Backend (lub przez jakąś stronę panelu) przedstawia klientowi instrukcję do wykonania u siebie (4.2) lub automatycznie konfiguruje go (np. via cloud-init).
	3.	Utrzymanie i monitoring
	•	Sprawdzanie czy tunel jest w stanie up, czy pingi w IPv6 działają (np. ping6 2a05:dfc1:3c00:beef::1), itp.
	•	Można zautomatyzować usuwanie starych / nieaktywnych tuneli.

6. Dodatkowe wskazówki
	•	Kontrola duplikatów: kluczowe jest, żeby backend (lub baza) pamiętał użyte „losowe segmenty” i przechowywał rezerwację /64.
	•	Rotacja: jeżeli w jakiejś puli kończy się zakres dostępnych segmentów, można zacząć od kolejnej, albo w razie potrzeby sięgnąć po większy blok / inny prefix.
	•	Testy: zaleca się przeprowadzić test – konfiguracja 1 tunelu, sprawdzenie pingu w obie strony, a następnie kolejnych tuneli.
	•	Inne typy tuneli: w analogiczny sposób można użyć GRE z tym samym podejściem do prefixów i ULA, choć 6in4 jest prostsze w warstwie IPv6.
	•	Routing: pamiętaj, że prefixy ULA (fdxx:...) nie powinny być rozgłaszane w BGP do Internetu. Wewnątrz sieci – jeśli masz kilka routerów – muszą one znać trasę do fde4:5a50:1114::/48 kierującą na Twój serwer.

7. Podsumowanie
	1.	4 główne prefixy służą do przydzielania dwóch /64 na tunel, zawsze pochodzących z ustalonej „pary”.
	2.	ULA (fde4:5a50:1114::/48) wykorzystywane jest do adresowania endpointów tunelu (hosts:1/64, client:2/64), co oszczędza puli globalnej i zapewnia jasny podział:
	•	ULA do „fizycznego” zestawienia tunelu,
	•	Globalne /64 – do dowolnego wykorzystania przez klienta.
	3.	Duplikaty: przed przydzieleniem nowego segmentu (np. beef) sprawdzamy w bazie czy nie był już użyty w tej samej puli.
	4.	Przykład konfiguracji (sekcja 4) pokazuje minimalne polecenia iproute2 dla serwera i klienta (Debian 12), które można automatycznie wygenerować w panelu / backendzie.

Dzięki temu proces tworzenia tuneli 6in4 jest przejrzysty, zautomatyzowany i spójny z wytycznymi:
	•	Z każdym tunelem → 2 globalne prefixy /64 + endpointy ULA,
	•	Prosta konfiguracja SIT (6in4) po obu stronach,
	•	Logika generowania i weryfikacji prefixów w backendzie,
	•	Możliwość rotacji między 4 głównymi puli (w parach).



GRE TUNEL

Poniżej przedstawiam kompletną instrukcję konfiguracji tuneli GRE (Generic Routing Encapsulation) w systemie Debian 12. Instrukcja uwzględnia:
	•	Adresy ULA na endpointach tunelu (w celu oszczędzania puli globalnej).
	•	Przydzielanie par /64 z głównych prefixów do klienta, zgodnie z wcześniej ustaloną logiką (losowy segment w czwartym hextetcie).
	•	Nadawanie interfejsom nazwy w formacie tun-gre0 (zamiast gre0).

1. Założenia i przykładowe wartości
	1.	Adres IPv4 serwera (TunnelBroker): 192.67.35.38
	2.	Adres IPv4 klienta: 141.11.62.211
	3.	Pule globalne (przykładowa para):
	•	2a05:dfc1:3c00::/40
	•	2a12:bec0:2c0::/44
	•	Dla przykładu, segment = beef:
	•	2a05:dfc1:3c00:beef::/64
	•	2a12:bec0:2c0:beef::/64
	4.	Adresacja ULA:
	•	Główny prefix ULA: fde4:5a50:1114::/48
	•	Wydzielamy pojedynczy /64 na endpointy tunelu, np. fde4:5a50:1114:beef::/64
	•	Serwer = fde4:5a50:1114:beef::1
	•	Klient = fde4:5a50:1114:beef::2

2. Konfiguracja po stronie serwera (TunnelBroker)

Wszystkie komendy wykonujemy w shellu (root) na Debianie 12.

#####################################
# 1) Utworzenie interfejsu GRE
#####################################
# Nazwa: "tun-gre0"
# mode: "gre"
# Adresy IPv4 do zestawienia: local (serwer), remote (klient)
ip tunnel add tun-gre0 mode gre \
    local 192.67.35.38 \
    remote 141.11.62.211 \
    ttl 64

#####################################
# 2) Podniesienie interfejsu
#####################################
ip link set tun-gre0 up

#####################################
# 3) Adresacja ULA na tunelu
#####################################
# Z puli fde4:5a50:1114::/48 wybraliśmy /64: fde4:5a50:1114:beef::/64
ip addr add fde4:5a50:1114:beef::1/64 dev tun-gre0

#####################################
# 4) Routing do prefixów /64 klienta
#####################################
# (W przykładzie 2a05:dfc1:3c00:beef::/64 i 2a12:bec0:2c0:beef::/64)
# Next-hop to ULA klienta: fde4:5a50:1114:beef::2
ip -6 route add 2a05:dfc1:3c00:beef::/64 via fde4:5a50:1114:beef::2 dev tun-gre0
ip -6 route add 2a12:bec0:2c0:beef::/64 via fde4:5a50:1114:beef::2 dev tun-gre0

Kontrola poprawności
	1.	Sprawdź, czy interfejs tun-gre0 jest widoczny:

ip link show tun-gre0


	2.	Potwierdź adres ULA:

ip -6 addr show dev tun-gre0


	3.	Potwierdź trasy:

ip -6 route show | grep tun-gre0

3. Konfiguracja po stronie klienta

Klient (Debian 12), adres IPv4: 141.11.62.211. Również używa nazwy interfejsu tun-gre0.

#####################################
# 1) Utworzenie interfejsu GRE
#####################################
ip tunnel add tun-gre0 mode gre \
    local 141.11.62.211 \
    remote 192.67.35.38 \
    ttl 64

#####################################
# 2) Podniesienie interfejsu
#####################################
ip link set tun-gre0 up

#####################################
# 3) Adresacja ULA 
#####################################
# Ten sam /64 z ULA, ale inny host-part:
ip addr add fde4:5a50:1114:beef::2/64 dev tun-gre0

#####################################
# 4) (Opcjonalnie) domyślna trasa IPv6
#####################################
# Jeśli Klient chce wysyłać cały ruch IPv6 przez tunel,
# można ustawić domyślną bramę na serwer:
ip -6 route add default via fde4:5a50:1114:beef::1 dev tun-gre0

#####################################
# 5) Nadawanie /64 globalnych
#####################################
# Klient otrzymał od Ciebie:
# 2a05:dfc1:3c00:beef::/64 i 2a12:bec0:2c0:beef::/64
# Może je przypisać na lokalnym interfejsie LAN, VM, kontenerze, itp.
# Przykład (jeśli klient ma eth0 jako LAN):
# ip addr add 2a05:dfc1:3c00:beef::1/64 dev eth0
# ip addr add 2a12:bec0:2c0:beef::1/64 dev eth0

Kontrola poprawności
	1.	Sprawdź, czy interfejs tun-gre0 istnieje i jest UP:

ip link show tun-gre0


	2.	Sprawdź adres ULA:

ip -6 addr show dev tun-gre0


	3.	W razie potrzeby testuj łączność:

ping6 fde4:5a50:1114:beef::1
# (powinien odpowiadać serwer)

4. Kluczowe informacje i uwagi
	1.	Nazwa interfejsu
	•	W powyższych przykładach użyliśmy tun-gre0 zamiast standardowego gre0. Możesz analogicznie tworzyć kolejne tunele o nazwach tun-gre1, tun-gre2 itd.
	2.	Wykorzystanie ULA
	•	Endpointy tunelu mają adresy prywatne (ULA). Ruch w warstwie IPv6 „wychodzi” do Internetu, gdy wewnątrz tunelu routuje się globalne prefixy /64 do klienta.
	•	W ten sposób nie „marnujesz” globalnych adresów IPv6 na sam tunel, a jednocześnie klient dostaje własne /64 w puli globalnej.
	3.	Przydzielanie par /64
	•	Zgodnie z wcześniejszą logiką, każdemu tunelowi przypadasz dwie podsieci /64 z ustalonej pary prefixów (np. 2a05:dfc1:3c00:xxxx::/64 + 2a12:bec0:2c0:xxxx::/64).
	•	„xxxx” to losowo wybrany segment (np. beef, dead, cafe), sprawdzony w bazie pod kątem kolizji.
	4.	Routing
	•	Serwer ma w tablicy tras rekordy kierujące do /64 klienta przez jego ULA.
	•	Po stronie klienta można ustawić domyślną trasę IPv6 na serwer, jeśli chcemy tunelować cały ruch (lub ewentualnie trasy bardziej szczegółowe, jeśli to tylko część ruchu).
	5.	Firewall
	•	GRE wymaga przepuszczenia protokołu IP nr 47 (GRE). Upewnij się, że firewall na serwerze i/lub routerach pośrednich zezwala na ruch GRE.
	6.	Automatyzacja
	•	Polecenia ip tunnel add ... można umieścić np. w pliku /etc/network/interfaces (lub w systemd-networkd/Netplan, zależnie od preferencji).
	•	W panelu/twojej aplikacji TunnelBroker warto dodać logikę generowania odpowiednich poleceń (lub plików konfiguracyjnych) w sposób automatyczny.

5. Podsumowanie

Dzięki tym przykładom możesz w prosty sposób skonfigurować tunel GRE między serwerem (TunnelBroker) a klientem, używając nazwy interfejsu tun-gre0. Zastosowanie adresów ULA na samym tunelu jest spójne z wcześniejszymi ustaleniami (oszczędzanie puli globalnej), a klient w dalszym ciągu otrzymuje dwa /64 z Twojej puli globalnej do własnego użytku.

Zalety:
	•	Jasna separacja adresów: ULA do endpointów, globalne /64 do użytkownika.
	•	Łatwość w automatyzacji – nazwy tun-greX mogą być generowane dynamicznie.
	•	Możliwość stosowania dowolnej rotacji pomiędzy czterema Twoimi głównymi prefixami, zgodnie z ustaloną parowością.

Efekt: Sprawnie działający tunel GRE, z minimalnym narzutem konfiguracyjnym i prostym mechanizmem routowania.

Powodzenia w dalszym wdrażaniu i integracji z aplikacją TunnelBroker!